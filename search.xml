<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>泛型</title>
    <url>/2021/11/06/%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<ul>
<li><em><strong>为什么要有泛型</strong></em><br> 用于分类，可高效分类，可规定类的属性的具体类，和方法返回的值和方法参数</li>
</ul>
<hr>
<ul>
<li><em><strong>在集合中使用泛型之前的情况</strong></em><br>问题一：类型不安全可以任意添加类型数据问题二：强制zhuan’hu时：可能出现ClassCastExceotion</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;添加成绩时</span><br><span class="line">          ArrayList arrayList &#x3D; new ArrayList();</span><br><span class="line">          arrayList .add(10);</span><br><span class="line">          arrayList .add(20);</span><br><span class="line">          arrayList .add(30);</span><br><span class="line">          arrayList .add(40);</span><br><span class="line">          arrayList .add(50);</span><br><span class="line">          arrayList .add(&quot;juad&quot;);</span><br><span class="line">          for (Object  o:</span><br><span class="line">               arrayList ) &#123;</span><br><span class="line">               Integer s &#x3D; (Integer)  o;&#x2F;&#x2F;强转发生错误</span><br><span class="line">              System.out.println(o);</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><em><strong>在集合中使用泛型后</strong></em><br>限制了数据添加add（）的参数。就不会出现问题一，二，编译时就会检查数据类型</li>
</ul>
<ol>
<li>内嵌式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; hashMap &#x3D; new HashMap();</span><br><span class="line">           hashMap.put(&quot;das&quot;,12);</span><br><span class="line">           hashMap.put(&quot;da2&quot;,12);</span><br><span class="line">           hashMap.put(&quot;adasd&quot;,12);</span><br><span class="line">           hashMap.put(&quot;s65&quot;,12);</span><br><span class="line">       Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries &#x3D; hashMap.entrySet();</span><br><span class="line">       Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator &#x3D; entries.iterator();</span><br><span class="line">       while(iterator.hasNext())&#123;</span><br><span class="line">           Map.Entry&lt;String, Integer&gt; next &#x3D; iterator.next();</span><br><span class="line">           System.out.println(next);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><em><strong>泛型的使用</strong></em><br>1.Jdk5.0出现的<br>2.总结：<br>①集合接口或集合在jdk5.0时都修改为带泛型的结构<br>②在实例化集合时，可以指明具体的泛型类型；<br>③指明完后，在集合类或接口中凡是定义类或接口时，内部结构（），都指定实例化类型<br>④泛型必须是类，比如包装类，int不行</li>
</ul>
<ul>
<li><em><strong>自定义泛型类，泛型接口，泛型方法</strong></em><br><strong>自定义泛型类</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class genericTest &lt;T&gt;&#123;</span><br><span class="line">           private  String name;</span><br><span class="line">           private int id;</span><br><span class="line">            private T userT;</span><br><span class="line"></span><br><span class="line">  public genericTest() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public genericTest(String name, int id, T userT) &#123;</span><br><span class="line">      this.name &#x3D; name;</span><br><span class="line">      this.id &#x3D; id;</span><br><span class="line">      this.userT &#x3D; userT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public String getName() &#123;</span><br><span class="line">      return name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public String toString() &#123;</span><br><span class="line">      return &quot;genericTest&#123;&quot; +</span><br><span class="line">              &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">              &quot;, id&#x3D;&quot; + id +</span><br><span class="line">              &quot;, userT&#x3D;&quot; + userT +</span><br><span class="line">              &#39;&#125;&#39;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void setName(String name) &#123;</span><br><span class="line">      this.name &#x3D; name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public int getId() &#123;</span><br><span class="line">      return id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void setId(int id) &#123;</span><br><span class="line">      this.id &#x3D; id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public T getUserT() &#123;</span><br><span class="line">      return userT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void setUserT(T userT) &#123;</span><br><span class="line">      this.userT &#x3D; userT;</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>
注意：  </li>
</ul>
<ul>
<li><p>不指明泛型就默认为Object类</p>
</li>
<li><p>要求如果定义泛型。建议在实例化时用泛型</p>
</li>
<li><p>子类泛型父类时如果指明父类泛型，子类实例化不需要指明泛型  </p>
</li>
<li><p>泛型类可有多个参数，例&lt;K,V&gt;</p>
</li>
<li><p>泛型不同不能赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">       ArrayList&lt;Integer&gt; strings1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">       strings &#x3D; strings1 ;</span><br></pre></td></tr></table></figure>
<p>编译时就会报错，泛型不同编译时会检查泛型类型，导致无法赋值</p>
</li>
<li><p>泛型要用就一值用，不用就一直不用；</p>
</li>
<li><p>静态方法不能用泛型在泛型类中，静态方法早于泛型</p>
</li>
<li><p>异常类不能是泛型</p>
</li>
<li><p>泛型数组 ：T[] arr = (T[])new Object[10] (编译可通过，实际创建的还是Object);new 后面要有具体的类，不能是T[10]; </p>
</li>
</ul>
<p><strong>泛型方法</strong></p>
<ul>
<li>方法中参数不确定，没在创建实例化时声明，与类是不是泛型类没关系<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public &lt;E&gt; List&lt;E&gt; test(E[] a)&#123;</span><br><span class="line">       List&lt;E&gt; list&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">       for (E o:</span><br><span class="line">            a) &#123;</span><br><span class="line">            list.add(o);</span><br><span class="line">       &#125;</span><br><span class="line">       return list;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>泛型方法可声明为静态的，泛型是在调用方法时确定的</li>
</ul>
<ul>
<li><p><em><strong>泛型在继承方面的体现</strong></em><br>泛型不同，及时泛型有继承性，泛型类实例化不具备子父类关系。<br>导致的问题：有些代码得写很多次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public void test4()&#123;</span><br><span class="line">    ArrayList&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Integer&gt; strings1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">                                            show(strings );</span><br><span class="line">                                            show(strings1 );&#x2F;&#x2F;无法使用一些二相同的功能</span><br><span class="line">&#125;</span><br><span class="line">public void show(ArrayList&lt;String&gt; arrayList)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p> <em><strong>通配符</strong></em><br>通配符的出现解决了上面出现的，相同功能没法一起使用的问题。类似于创建一个父类；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public void test4()&#123;</span><br><span class="line">        ArrayList&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; strings1 &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;                                                show(strings );</span><br><span class="line">&#x2F;&#x2F;    </span><br><span class="line">&#x2F;&#x2F;                                                show(strings1 );&#x2F;&#x2F;无法使用一些二相同的功能</span><br><span class="line">        ArrayList&lt;?&gt; objects &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        objects&#x3D;strings ;</span><br><span class="line">        show(objects );</span><br><span class="line">        objects &#x3D; strings1;</span><br><span class="line">        show(objects ); </span><br><span class="line">    &#125;</span><br><span class="line">    public void show(ArrayList&lt;?&gt; arrayList)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>ArrayList&lt;?&gt;类不能添加数据，除了null，null都可以。</li>
<li>可读，不可添加</li>
</ul>
<ul>
<li><p><em><strong>通配符的使用：有限制条件的使用</strong></em><br>List&lt;? extends Person&gt; list1 = null;<br>?可以是person的子类，它就可以进行赋值操作</p>
</li>
<li><p><em><strong>实验一</strong></em></p>
</li>
</ul>
<p>1.无太多问题，老是忘改一些东西。</p>
<ul>
<li><em><strong>实验二</strong></em></li>
</ul>
<p>1.空指针异常，原因就是声明属性了，但是没有去创建容器，导致默认null，所以使用put（）方法时，空指针。<br>2.类型转换异常，原因就是强转，向下转型时，必须原本要转的对象原本是那个类才能转，要不然就会发生类型转换异常，解决方法就是，new ArrayList(map.values()),还可以通过遍历的方式存储；</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/11/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>程序(programm)<br>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</p>
</li>
<li><p>进程(process)<br>概念：程序的一次执行过程，或是正在运行的一个程序。<br>说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>
</li>
<li><p>线程(thread)<br>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。</p>
</li>
</ol>
<p>补充：<br>内存结构：</p>
<p>进程可以细化为多个线程。<br>每个线程，拥有自己独立的：栈、程序计数器<br>多个线程，共享同一个进程中的结构：方法区、堆。</p>
]]></content>
      <categories>
        <category>财富密码</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>io流</title>
    <url>/2021/11/08/io%E6%B5%81/</url>
    <content><![CDATA[<ul>
<li><em><strong>IO流</strong></em><br>I:input ,输入<br>O:output ,输出</li>
<li><em><strong>File类的使用</strong></em><br>用File类的对象代表文件和文件目录（俗称文件夹）  </li>
</ul>
<p>1.如何创建File对象<br>构造器：<br>1.File(String Filepath)创建.txt<br>2.File(String parent,String child)创建子目录<br>3.File(String parent,String child)parent表示目录名，child表示创建的.txt的名字<br>New File()时只是对象层面的创建，还没进行内存层面的创建<br>File类声明在java.io包下  </p>
<p>2.相对路径：相较于某个路径，指明的路径<br>绝对路径：包含盘符的文件或文件目录<br>3.路劲分隔符:windows和dos下\<br>Linux下/</p>
<ul>
<li><em><strong>File常见方法</strong></em><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     File file &#x3D; new File(&quot;czl.txt&quot; );</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        File file1 &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\文件\\czl.txt&quot;);</span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        File hh &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\文件&quot;);</span><br><span class="line">        System.out.println(hh);</span><br><span class="line">        File hh1 &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\文件&quot;, &quot;hh.txt&quot;);</span><br><span class="line">        System.out.println(hh1);</span><br><span class="line">&#x2F;&#x2F;         public String getAbsolutePath()：获取绝对路径 ***</span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line">&#x2F;&#x2F; public String getPath() ：获取路径</span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">&#x2F;&#x2F; public String getName() ：获取名称</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">&#x2F;&#x2F; public String getParent()：获取上层文件目录路径。若无，返回null   ***</span><br><span class="line">        System.out.println(file.getParent());</span><br><span class="line">&#x2F;&#x2F; public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span><br><span class="line">        System.out.println(file.length());</span><br><span class="line">&#x2F;&#x2F; public long lastModified() ：获取最后一次的修改时间，毫秒值</span><br><span class="line">        System.out.println(file.lastModified());</span><br><span class="line">&#x2F;&#x2F; public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span><br><span class="line">        String[] list &#x3D; hh.list();</span><br><span class="line">        for (String o:</span><br><span class="line">             list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F; public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span><br><span class="line">        File[] files &#x3D; hh.listFiles();</span><br><span class="line">        for (File o:</span><br><span class="line">             files ) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @Test</span><br><span class="line">    public void test01() throws IOException  &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\文件&quot;);</span><br><span class="line">&#x2F;&#x2F;          public boolean isDirectory()：判断是否是文件目录</span><br><span class="line">        if(file.exists())</span><br><span class="line">        System.out.println(file.isDirectory());</span><br><span class="line">&#x2F;&#x2F; public boolean isFile() ：判断是否是文件</span><br><span class="line">        if(file.exists())</span><br><span class="line">        System.out.println(file.isFile());</span><br><span class="line">&#x2F;&#x2F; public boolean exists() ：判断是否存在</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; public boolean canRead() ：判断是否可读</span><br><span class="line">        System.out.println(file.canRead());</span><br><span class="line">&#x2F;&#x2F; public boolean canWrite() ：判断是否可写</span><br><span class="line">        System.out.println(file.canWrite());</span><br><span class="line">&#x2F;&#x2F; public boolean isHidden() ：判断是否隐藏</span><br><span class="line">        System.out.println(file.isHidden());</span><br><span class="line">&#x2F;&#x2F;        13.1 File 类的使用：常用方法</span><br><span class="line">&#x2F;&#x2F; File类的创建功能</span><br><span class="line">        file &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\IO流&quot;,&quot;hh.txt&quot;);</span><br><span class="line">&#x2F;&#x2F; public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span><br><span class="line">        if(!(file.exists()))&#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F; public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。</span><br><span class="line">        file &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\IO流&quot;,&quot;hi&quot;);</span><br><span class="line">        file.mkdir();</span><br><span class="line">&#x2F;&#x2F;        如果此文件目录的上层目录不存在，也不创建。</span><br><span class="line">        file &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\IO流&quot;);</span><br><span class="line">         del(file);</span><br><span class="line">&#x2F;&#x2F; public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span><br><span class="line">        file &#x3D; new File(&quot;C:\\Users\\cilin\\Desktop\\IO流副本&quot;,&quot;hi&quot;);</span><br><span class="line">        file.mkdirs();</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void del(File e)&#123;</span><br><span class="line">        File[] files &#x3D; e.listFiles();</span><br><span class="line">        for (File o:</span><br><span class="line">             files) &#123;</span><br><span class="line">                  if(o.isFile())&#123;</span><br><span class="line">                      o.delete();</span><br><span class="line">                  &#125;else if(o.isDirectory())&#123;</span><br><span class="line">                      if(o.list().length &#x3D;&#x3D; 0)&#123;</span><br><span class="line">                          o.delete();</span><br><span class="line">                      &#125;else&#123;</span><br><span class="line">                      del(o);&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  e.delete() ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
注意： </li>
</ul>
<p>1.删除目录时得把里面内容删除，才能删除目录（可用递归方式）</p>
<ul>
<li><em><strong>流的分类</strong></em><br>按输入，输出分为（以程序（内存）为参考）:输入流，输出流<br>按传输内容：字节流（一般图片，视频之类），字符类（具体的文本文件）<br>按流的角色：节点流，处理流 </li>
</ul>
<table>
<thead>
<tr>
<th align="center">抽象基类</th>
<th align="center">字节流</th>
<th align="center">字符流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">输入流</td>
<td align="center">InputStream</td>
<td align="center">Reader</td>
</tr>
<tr>
<td align="center">输出流</td>
<td align="center">OutputStream</td>
<td align="center">Writer</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">抽象基类</th>
<th align="center">文件流（节点流）</th>
<th align="center">缓冲流</th>
</tr>
</thead>
<tbody><tr>
<td align="center">InputStream</td>
<td align="center">FileInputStream</td>
<td align="center">BufferInputStream</td>
</tr>
<tr>
<td align="center">OutputStream</td>
<td align="center">FileOutputStream</td>
<td align="center">BufferOutputStream</td>
</tr>
<tr>
<td align="center">Reader</td>
<td align="center">FileReader</td>
<td align="center">BufferReader</td>
</tr>
<tr>
<td align="center">Writer</td>
<td align="center">FileWriter</td>
<td align="center">BufferWriter</td>
</tr>
</tbody></table>
<p>main下:写new File(“hh.txt”)是想对于（默认）此project目录下的<br>@Test：则是相对于module而言，是在此module目录下创建的  </p>
<ul>
<li><em><strong>使用流</strong></em> </li>
<li>字符流 </li>
</ul>
<p>1.操作.txt的内容，并输出至控制台  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.实例化File,</span><br><span class="line">       File file &#x3D; new File(&quot;hh.txt&quot;);</span><br><span class="line">       if(!(file.exists()))&#123;</span><br><span class="line">           file.createNewFile();</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;创建流，相当于管道一样</span><br><span class="line">       FileReader fileReader &#x3D; new FileReader(file);</span><br><span class="line">       &#x2F;&#x2F;管道创建好后，此就需要开关一样的东西.read()方法</span><br><span class="line">       int read &#x3D; fileReader.read();&#x2F;&#x2F;类似于迭代器，它不是一下所有都输出，而是一个一个输出 ，read返回-1时结束</span><br><span class="line">        while(!(read &#x3D;&#x3D; -1))&#123;</span><br><span class="line">            System.out.print((char)read);</span><br><span class="line">            read &#x3D; fileReader.read() ;</span><br><span class="line">        &#125;</span><br><span class="line">       &#x2F;&#x2F;任何情况，在使用完流后需要关闭流，否则会导致内存的泄露</span><br><span class="line">       fileReader .close();</span><br></pre></td></tr></table></figure>
<p>注意点：<br>1.read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1<br>2.异常的处理：为了保证流资源一定可以执行关闭操作。需要用try-catch-finally处理<br>3.读入文件必须存在，否则报FileNotFoundException异常</p>
<p>2.read()强化（重载）<br>read(char[5] a)：表示每次读取五个，后面依次从数组前面开始赋值，并返回写进char数组的字符数（遍历时要用）<br>问题：<br>1.直接循环输出数组会出现于实际情况不对应的情况，主要原因是当chars数组读去文件时，最后一次读取小于chars的长度导致替换了数组的一部分而后面部分没替换，只有在文件字符数%chars数组长度=0时，与其他方式无区别。<br>2.正确遍历方式  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.File类的实例化</span><br><span class="line">        FileReader fileReader &#x3D; null;</span><br><span class="line">        File file &#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            file &#x3D; new File(&quot;hh.txt&quot;);</span><br><span class="line">            &#x2F;&#x2F;2.FileReader的实例化</span><br><span class="line">            fileReader &#x3D; new FileReader(file);</span><br><span class="line">            &#x2F;&#x2F;3.读入的操作</span><br><span class="line">            &#x2F;&#x2F;返回读入的字符个数以chars为载体一般是对前面字符组进行替换，chars为中间媒介，如果达到末尾返回-1 ，</span><br><span class="line">            char[] chars &#x3D; new char[5];</span><br><span class="line">            int read &#x3D; fileReader.read(chars);</span><br><span class="line">            while(!(read &#x3D;&#x3D; -1))&#123;</span><br><span class="line">                &#x2F;&#x2F;方式一</span><br><span class="line">     &#x2F;&#x2F;           for (int i &#x3D; 0; i &lt; read; i++) &#123;</span><br><span class="line">     &#x2F;&#x2F;               System.out.print(chars[i]);</span><br><span class="line">     &#x2F;&#x2F;           &#125;</span><br><span class="line">                &#x2F;&#x2F;方式二：</span><br><span class="line">                System.out.print(new String(chars).substring(0, read )); &#x2F;&#x2F;read写入的个数从一开始，substring包左不包右</span><br><span class="line">                read &#x3D; fileReader .read(chars);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if(file.exists() )</span><br><span class="line">                try &#123;</span><br><span class="line">                    fileReader .close() ;</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;4.资源的关闭</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.FileWriter的使用</p>
<pre><code>* FileWriter有两种构造器：
* 1.FileWriter(file)//append默认为false会覆盖原文件
* 2.FileWriter(file,true)//显示的表示append为true
* */
@Test
public void fileWriterTest() &#123;
    //1.创建一个写入的地方
    FileWriter fileWriter = null;//默认append=false，true不覆盖
    try &#123;
        File file = new File(&quot;hi.txt&quot;);
        //使用流连接目的地
        fileWriter = new FileWriter(file,true);
        //具体写入方式
        fileWriter .write(&quot;\ndasdasdadasdasd&quot;);
        //关闭流
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125; finally &#123;
        try &#123;
            fileWriter.close();
        &#125; catch (IOException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

&#125;
</code></pre>
<p>3.FileReader与FileWriter进行复制操作  </p>
<pre><code> FileReader fileReader =null;
    FileWriter fileWriter =null;
    try &#123;
        File hi = new File(&quot;hi.txt&quot;);
        //复制到的的文件
        File hi1 = new File(&quot;h1.txt&quot;);
        //创建流
        //1.创建输入流
      fileReader = new FileReader(hi);
        //创建输出流
        fileWriter = new FileWriter(hi1,false);
        //操作具体的输入输出
        char[] chars = new char[5];
        int len;
        while((len=fileReader.read(chars)) != -1 )&#123;
            fileWriter.write(chars,0,len);
        &#125;
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125; finally &#123;
        if(fileReader!=null)&#123;
            try &#123;
                fileReader .close() ;
            &#125; catch (IOException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
        if(fileWriter !=null)&#123;
            try &#123;
                fileWriter .close() ;
            &#125; catch (IOException e) &#123;
                e.printStackTrace();
            &#125;
        &#125;
    &#125;
</code></pre>
<p>注意：<br>流开启时，进行循环添加并不是像FileWriter构造器一样，只在append为true才能在原来的基础下添加。。它是直接进行在末尾添加；<br>字符流，可以操作字符相关的文件，无法处理图像和视频；  </p>
<ul>
<li>字节流<br>建议：文本文件（没有图片内容的文件），用字符流操作，以一个字符为单位读取  <pre><code>  图像相关的文件用字节流；以一个字节为单位读取；
</code></pre>
1.用FileInputStream与FileOutputStream实现复制操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FileInputStream fileInputStream &#x3D; null;</span><br><span class="line">       FileOutputStream fileOutputStream &#x3D;null;</span><br><span class="line">       try &#123;</span><br><span class="line">           File srcFile &#x3D; new File(&quot;尚硅谷_授课须知.pdf&quot;);</span><br><span class="line">           File destFile &#x3D; new File(&quot;尚硅谷_授课须知2.pdf&quot;);</span><br><span class="line">           &#x2F;&#x2F;创建具体流</span><br><span class="line">         fileInputStream &#x3D; new FileInputStream(srcFile);</span><br><span class="line">           fileOutputStream &#x3D; new FileOutputStream(destFile);</span><br><span class="line">           &#x2F;&#x2F;对文件具体操作</span><br><span class="line">           &#x2F;&#x2F;创建缓冲</span><br><span class="line">           byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">           int len;</span><br><span class="line">           while((len &#x3D; fileInputStream.read(bytes)) !&#x3D;-1 )&#123;</span><br><span class="line">                  fileOutputStream.write(bytes ,0,len);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if(fileInputStream !&#x3D; null)   &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fileInputStream .close() ;</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if(fileOutputStream !&#x3D;null) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   fileOutputStream .close() ;</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>处理流一：缓冲流<br>BufferedReader，BufferedWriter,BufferedInputStream,BufferedOutputStream<br>实验一：<br>用BufferReader，BufferWriter对文本文件进行复制操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BufferedReader bufferedReader &#x3D; null;</span><br><span class="line">       BufferedWriter bufferedWriter &#x3D; null;</span><br><span class="line">       try &#123;</span><br><span class="line">           &#x2F;&#x2F;1.创建文件</span><br><span class="line">           File SrcFile &#x3D; new File(&quot;hi.txt&quot;);</span><br><span class="line">           File destFile &#x3D; new File(&quot;hi1.txt&quot;);</span><br><span class="line">           &#x2F;&#x2F;创建流</span><br><span class="line">           &#x2F;&#x2F;1.输入流</span><br><span class="line">           FileReader fileReader &#x3D; new FileReader(SrcFile);</span><br><span class="line">           bufferedReader &#x3D; new BufferedReader(fileReader);</span><br><span class="line">           &#x2F;&#x2F;创建输出流</span><br><span class="line">           FileWriter fileWriter &#x3D; new FileWriter(destFile);</span><br><span class="line">           bufferedWriter &#x3D; new BufferedWriter(fileWriter);</span><br><span class="line">           &#x2F;&#x2F;具体操作</span><br><span class="line">           char[] chars &#x3D; new char[10];</span><br><span class="line">           int len;</span><br><span class="line">           while((len&#x3D;bufferedReader.read(chars))!&#x3D;-1)&#123;</span><br><span class="line">                bufferedWriter.write(chars,0,len);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if(bufferedReader !&#x3D; null)&#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   bufferedReader.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           if(bufferedWriter !&#x3D; null)&#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   bufferedWriter.close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 实验二:<br> 用BufferedInputStream，BufferedOutputStream对图像文件进行操作<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1.创建文件</span><br><span class="line">       BufferedInputStream bufferedInputStream &#x3D; null;</span><br><span class="line">       BufferedOutputStream bufferedOutputStream &#x3D; null;</span><br><span class="line">       try &#123;</span><br><span class="line">           File file &#x3D; new File(&quot;尚硅谷_授课须知.pdf&quot;);</span><br><span class="line">           File file1 &#x3D; new File(&quot;尚硅谷_授课须知1.pdf&quot;);</span><br><span class="line">           &#x2F;&#x2F;2.创建流</span><br><span class="line">           &#x2F;&#x2F;输入流</span><br><span class="line">           FileInputStream file2 &#x3D; new FileInputStream(file);</span><br><span class="line">           bufferedInputStream &#x3D; new BufferedInputStream(file2);</span><br><span class="line">           &#x2F;&#x2F;输出流</span><br><span class="line">           FileOutputStream fileOutputStream &#x3D; new FileOutputStream(file1);</span><br><span class="line">           bufferedOutputStream &#x3D; new BufferedOutputStream(fileOutputStream);</span><br><span class="line">           &#x2F;&#x2F;具体操作</span><br><span class="line">           byte[] bytes &#x3D; new byte[1024];</span><br><span class="line">           int len;</span><br><span class="line">           while((len&#x3D;bufferedInputStream.read(bytes))!&#x3D;-1 )&#123;</span><br><span class="line">               bufferedOutputStream .write(bytes ,0,len) ;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           if(bufferedInputStream !&#x3D; null)&#123;</span><br><span class="line"></span><br><span class="line">               try &#123;</span><br><span class="line">                   bufferedInputStream .close();</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           if(bufferedOutputStream!&#x3D;null)&#123;</span><br><span class="line"></span><br><span class="line">               try &#123;</span><br><span class="line">                   bufferedOutputStream .close() ;</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><br>注意：<br>缓冲流中，输出时，当到达缓冲极限，类方法自动调用flush(),刷新缓冲，并把缓冲内容输出到内存（程序），可以手动调用flush()把已经存在缓冲区的内容写入文件。而对输入，也会经过缓冲区，当缓冲区存量到达8196byte（8kb）时，才重新对下一组数据读取</p>
<ul>
<li><p>处理流二：转换流<br>转换流：1.解码：用输入流，把字节转化成字符(人能看的),用处理流InputStreamReader类<br>2.编码：把字符转换成相对应编码的字节码格式，用处理流OutputStreamWriter类<br>实验：<br>对文件按写入编码格式读取，并按照GBk格式编码，然后在以Utf-8和gbk读取，观察两种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    InputStreamReader inputStreamReader &#x3D; null;&#x2F;&#x2F;将FileInputStream转化为Reader</span><br><span class="line">        OutputStreamWriter gbk &#x3D; null;&#x2F;&#x2F;将字符按照指定编码转换成字节，编码和译码传输的都是字节</span><br><span class="line">        try &#123;</span><br><span class="line">            FileInputStream fileInputStream &#x3D; new FileInputStream(&quot;hh.txt&quot;);</span><br><span class="line">            inputStreamReader &#x3D; new InputStreamReader(fileInputStream , &quot;UTF-8&quot;);</span><br><span class="line">            FileOutputStream fileInputStream1 &#x3D; new FileOutputStream(&quot;hh1.txt&quot;);</span><br><span class="line">  </span><br><span class="line">            gbk &#x3D; new OutputStreamWriter(fileInputStream1 , &quot;gbk&quot;);</span><br><span class="line">            char[] chars &#x3D; new char[20];</span><br><span class="line">            int len;</span><br><span class="line">            while((len &#x3D; inputStreamReader .read(chars))!&#x3D;-1)&#123;</span><br><span class="line">                gbk.write(chars,0,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (inputStreamReader !&#x3D; null)&#123;</span><br><span class="line">  </span><br><span class="line">                try &#123;</span><br><span class="line">                    inputStreamReader .close() ;</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(gbk!&#x3D;null)&#123;</span><br><span class="line">  </span><br><span class="line">                try &#123;</span><br><span class="line">                    gbk.close() ;</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">转换流：以我的理解在传输过程中是以字节在传输，然后再套上一层处理流，当程序去读取时，把读取的字节按照指定的编码解码，写入文件时，再把文件按照指定的编码格式编码，转换成字节流，然后储存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ 标准的输入,输出流（了解）</span><br><span class="line">输入流一般是字节流，要进行操作时，通常用InputStreamReader类进行转化成字符流；</span><br><span class="line">输出流，常见的各种print</span><br><span class="line"></span><br><span class="line">+ ***对象流（处理流）***</span><br><span class="line"></span><br><span class="line">+ ObjectInputStream与ObjectOutputStream</span><br><span class="line">序列化：ObjectOutputStream类保存基本数据结构或对象的机制；</span><br><span class="line">反序列化：ObjectInputStream类读取基本数据类型或对象的机制；</span><br><span class="line"></span><br><span class="line">+ 对象序列化机制</span><br><span class="line"></span><br><span class="line">  允许把内存中的Java对象转换成无关的二进制流，从而允许把这种二进制流持久保存在磁盘上，或通过网络将这在二进制流传到另一个节点。</span><br><span class="line"></span><br><span class="line">+ 序列化</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;java</span><br><span class="line">   &#x2F;&#x2F;将对象转换成二进制持久化存储在磁盘，或通过网络传输</span><br><span class="line">          ObjectOutputStream objectOutputStream &#x3D; null;</span><br><span class="line">          try &#123;</span><br><span class="line">              objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;ss.dat&quot;));</span><br><span class="line">              objectOutputStream.writeObject(new String(&quot;sss&quot;));</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; finally &#123;</span><br><span class="line">              if(objectOutputStream !&#x3D;null) &#123;</span><br><span class="line">                  try &#123;</span><br><span class="line">                      objectOutputStream.close();</span><br><span class="line">                  &#125; catch (IOException e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;ss.dat&quot;</span>));</span><br><span class="line">           Object o = objectInputStream.readObject();</span><br><span class="line">           String str=<span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">if</span>(o <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                   str= (String)o;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(objectInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   objectInputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>序列化要求</p>
<p>1.需要实现Serializable（标识接口内部无任何方法）</p>
<p>2.得添加serialVersionUId（一个静态常量）并赋值，不手动赋值系统会自动为类匹配一个，可能会出现问题（识别类）</p>
<p>3.对象的属性也得可序列化</p>
<p>注意：static和transient不能序列化</p>
</li>
<li><p>RandomAccessDFile类</p>
<p>1.继承于Java.lang.Object类实现了DateInput和DataOutput，既可以当输出流也可当输入流，类似于节点流，直接嵌入构造器的是文件，后面要写“r”，“rw”，“rd‘，之类的操作</p>
<p>2.如果RandomAccessFile作为输出流时，如果文件不存在会创建一个新文件。如果存在，并不是追加append，也不是覆盖整个文件，而是从前往后进行覆盖。（默认从前往后覆盖）</p>
<p>3.seek（int index）</p>
<p>把角标移到index位置</p>
<p>4.实现插入效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现插入效果</span></span><br><span class="line">        RandomAccessFile rw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rw = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hi.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            rw.seek(<span class="number">3</span>);<span class="comment">//调用seek使得指针移到3</span></span><br><span class="line">            StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            stringBuffer.append(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="comment">//调用read指针也会移动，最终移到最后面</span></span><br><span class="line">            <span class="keyword">while</span>((len=rw.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                           stringBuffer.append(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">//调回指针再写</span></span><br><span class="line">            rw.seek(<span class="number">3</span>);</span><br><span class="line">            rw.write(stringBuffer.toString().getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(rw !=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>遇到的问题，不知道read也可使指针向后移动，没有回调</p>
<p>解决：当read结束后回调指针使用方法seek</p>
<h2 id="这章重点"><a href="#这章重点" class="headerlink" title="这章重点"></a>这章重点</h2><h3 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h3><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>对象流重点在序列化</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性</title>
    <url>/2021/11/19/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="Lambda使用"><a href="#Lambda使用" class="headerlink" title="Lambda使用"></a>Lambda使用</h2><p>-&gt;Lamda操作符</p>
<p>-&gt;左边：形参列表（其实就是接口中的抽象方法的形参列表）</p>
<p>-&gt;右边：Lambda体（其实就是重写方法的方法体）</p>
<p>Lambda实际是一个接口的实例化（匿名的实现类）</p>
<p>只有一个抽象方法的，</p>
<p>return 不行一般</p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>只有一个抽象方法</p>
<h2 id="方法引用与构造器引用，数组引用"><a href="#方法引用与构造器引用，数组引用" class="headerlink" title="方法引用与构造器引用，数组引用"></a>方法引用与构造器引用，数组引用</h2><p>基于函数式接口实例化</p>
<p>方法引用：</p>
<p>1.类：：静态方法</p>
<p>2.对象：：非静态方法</p>
<p>3.类：：非静态方法</p>
<p>构造器：</p>
<p>创建对象时：</p>
<p>构造器：：new</p>
<h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><p>有关计算的</p>
<p>对数据进行操作</p>
<h2 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h2><p>1.collection.stream()</p>
<p>2.Arrays.stream（数组）</p>
<p>3.Stream.of()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：</span></span><br><span class="line">           strings.add(<span class="string">&quot;dasd&quot;</span>);</span><br><span class="line">           strings.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">           strings.add(<span class="string">&quot;sd&quot;</span>);</span><br><span class="line">           strings.add(<span class="string">&quot;sd&quot;</span>);</span><br><span class="line">           strings.add(<span class="string">&quot;sd&quot;</span>);</span><br><span class="line">           Stream&lt;String&gt; stream = strings.stream();</span><br><span class="line"> <span class="comment">//创建方式二：</span></span><br><span class="line">           Stream&lt;Integer&gt; stream1 = Arrays.stream(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">           <span class="comment">//创建三：Stream.of</span></span><br><span class="line">           Stream&lt;? extends Serializable&gt; stream2 = Stream.of(<span class="number">10</span>, <span class="string">&quot;12&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对Stream具体操作"><a href="#对Stream具体操作" class="headerlink" title="对Stream具体操作"></a>对Stream具体操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//筛选：filter()参数是函数型接口Predicate</span></span><br><span class="line">            stream.filter(e-&gt;e.contains(<span class="string">&quot;s&quot;</span>)).forEach(System.out::println);<span class="comment">//用了不能再使用，停止后不能重复使用Stream</span></span><br><span class="line">            <span class="comment">//截断式：limit</span></span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">            strings.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">            <span class="comment">//跳过：skip（） ,得用新的Stream</span></span><br><span class="line">            strings.stream().skip(<span class="number">1</span>).forEach(System.out::println);</span><br><span class="line">            <span class="comment">//去重：distinct（）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">            strings.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>反射机制</title>
    <url>/2021/11/17/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a><em><strong>反射机制</strong></em></h1><p>反射机制比较重要，得会写，有些底层的东西以后慢慢理解，</p>
<p>要点：</p>
<p><img src="C:\Users\cilin\AppData\Roaming\Typora\typora-user-images\image-20211117190042670.png" alt="image-20211117190042670"></p>
<p>注：标红为掌握内容</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>动态语言，反射机制允许程序运行时借助Reflection API取得类内部信息，并能直接操作任意对象类的属性和方法；</p>
<p>反射：原来就包下的类创建的对象，通过反射由对象确定对于的类，然后再确定对应的包</p>
<p>反射相关主要API</p>
<p><img src="C:\Users\cilin\AppData\Roaming\Typora\typora-user-images\image-20211117190906453.png" alt="image-20211117190906453"></p>
<p>Class类：描述类（类中有相同的东西）的类</p>
<p>1.没有反射前无法对类的私有成员进行操作（直接调用的情况下）。</p>
<p>2.有反射可以调用</p>
<p>疑问：反射和封装性矛不矛盾？</p>
<p>答：不矛盾，封装是考虑的是建议你做什么，而反射则是考虑的是能不能获取的问题，他们并不矛盾。</p>
<h2 id="Class类（重点）"><a href="#Class类（重点）" class="headerlink" title="Class类（重点）"></a>Class类（重点）</h2><p>类的加载过程：</p>
<p>程序经过javac.exe命令后，生成一个或者多个字节码文件（.class）(编译过程)</p>
<p>接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将一个类加载到内存中，此过程就称为类的加载，加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例</p>
<h3 id="获取Class实例的方式"><a href="#获取Class实例的方式" class="headerlink" title="获取Class实例的方式"></a>获取Class实例的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//方式一：.class</span></span><br><span class="line">Class cla = Person.class;</span><br><span class="line"> System.out.println(cla);</span><br><span class="line"> <span class="comment">//方式二：通过对象获取Class类</span></span><br><span class="line"> Class aClass = (<span class="keyword">new</span> Person()).getClass();</span><br><span class="line"> System.out.println(aClass);</span><br><span class="line"> <span class="comment">//方式三：调用静态方法：forName(String classPath)</span></span><br><span class="line">   Class a=Class.forName(<span class="string">&quot;com.atguigu.day12.Person&quot;</span>);</span><br><span class="line">   <span class="comment">//方法四了解：类的加载器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：数组维度一样，Class也一样</p>
<h2 id="ClassLoder"><a href="#ClassLoder" class="headerlink" title="ClassLoder"></a>ClassLoder</h2><p>获取配置信息的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">       <span class="comment">//方式一：直接通过节点流的方式相对于module目录下</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">       properties.load(fileInputStream);</span><br><span class="line">       System.out.println(properties.getProperty(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">       System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">       <span class="comment">//方式二：通过ClassLoader方式,默认目录为此类所在目录的上一层目录</span></span><br><span class="line">       ClassLoader classLoader = classTes.class.getClassLoader();</span><br><span class="line">       InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;com/atguigu/jdbc1.properties&quot;</span>);</span><br><span class="line">       properties.load(resourceAsStream);</span><br><span class="line">       System.out.println(properties.getProperty(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">       System.out.println(properties.getProperty(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="调用运行时类的指定结构（重点）"><a href="#调用运行时类的指定结构（重点）" class="headerlink" title="调用运行时类的指定结构（重点）"></a>调用运行时类的指定结构（重点）</h2><p>获取指定方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">           Person person = personClass.newInstance();</span><br><span class="line">           Method setAge = personClass.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">           <span class="comment">//表面可访问</span></span><br><span class="line">           setAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           setAge.invoke(person,<span class="number">10</span>);</span><br><span class="line">           System.out.println(person);</span><br><span class="line">           Method getAge = personClass.getDeclaredMethod(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">           getAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           <span class="comment">//invoke：调用。返回原方法返回值，默认Object</span></span><br><span class="line">           Object invoke = getAge.invoke(person);</span><br><span class="line">           System.out.println(invoke);</span><br></pre></td></tr></table></figure>



<p>获取指定的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">Person person = personClass.newInstance();</span><br><span class="line">Field age = personClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//保证当前属性可访问</span></span><br><span class="line">age.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//不能修改，之前，应该把.setAccessiable参数写为true</span></span><br><span class="line">age.set(person,<span class="number">100</span>);</span><br><span class="line">System.out.println(person.getAge());</span><br></pre></td></tr></table></figure>

<p>获取静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">Method test = personClass.getDeclaredMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">test.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(test.invoke(String.class)); <span class="comment">//主要是有这个参数，这个参数随便填没影响</span></span><br></pre></td></tr></table></figure>

<p>获取构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">Constructor&lt;Person&gt; declaredConstructor = personClass.getDeclaredConstructor(<span class="keyword">int</span>.class, String.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Person tom = declaredConstructor.newInstance(<span class="number">10</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">System.out.println(tom);</span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态和动态代理：静态比较死，编译就确定，动态比较灵活，运行期间确定。</p>
<h2 id="学习的思维方式"><a href="#学习的思维方式" class="headerlink" title="学习的思维方式"></a>学习的思维方式</h2><p>1.“大处着眼，小处着手”</p>
<p>2.逆向思维，反正法</p>
<p>3.透过问题看本质。</p>
<p>两句话：</p>
<p>1.小不忍则乱大谋</p>
<p>2.识时务为俊杰</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2021/11/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a><em><strong>网络编程</strong></em></h1><h2 id="网络编程中解决的问题"><a href="#网络编程中解决的问题" class="headerlink" title="网络编程中解决的问题"></a>网络编程中解决的问题</h2><p>1.问题一：IP和端口号</p>
<p>2.问题二：提供网络协议</p>
<h2 id="IP和端口号"><a href="#IP和端口号" class="headerlink" title="IP和端口号"></a>IP和端口号</h2><h3 id="Ip"><a href="#Ip" class="headerlink" title="Ip"></a>Ip</h3><p>InetAdress类代表一个Ip</p>
<p>分类：ipv4，ipv6</p>
<p>1.如何实例化</p>
<p>InetAddress a=InetAddress.getByName(”“)参数是Ip，或域名</p>
<p>两个常用方法：</p>
<p>getHostName//获取当前InetAddress对象域名</p>
<p>getHostAddress//获取当前InetAddress对象Ip</p>
<h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>标识正在运行的程序</p>
<p>公认端口：0~1023</p>
<p>注册端口：1024~49151</p>
<p>动态/私有端口：49152~65535</p>
<p>端口号与IP地址的组合得出一个网络套接字：Socket</p>
<p>网络通信也叫Socket通信</p>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="Tcp网络编程"><a href="#Tcp网络编程" class="headerlink" title="Tcp网络编程"></a>Tcp网络编程</h3><p>练习一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cilent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Socket socket = <span class="keyword">null</span>;</span><br><span class="line">       OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8556</span>);</span><br><span class="line">           outputStream = socket.getOutputStream();</span><br><span class="line">           outputStream.write(<span class="string">&quot;你好&quot;</span>.getBytes()); <span class="comment">//写入的是字节</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   socket.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   outputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">       InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8556</span>);</span><br><span class="line">           Socket accept = serverSocket.accept();</span><br><span class="line">           inputStream = accept.getInputStream();</span><br><span class="line">           byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();    <span class="comment">//对与中文比较有用，中文是由几个字节组成的，</span></span><br><span class="line">           <span class="comment">//先存储完整的字节，然后</span></span><br><span class="line">           <span class="comment">//获取也是字节</span></span><br><span class="line">           <span class="keyword">int</span> len;</span><br><span class="line">           <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">           <span class="keyword">while</span>((len = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                     byteArrayOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(byteArrayOutputStream);</span><br><span class="line">           System.out.println(<span class="string">&quot;来自：&quot;</span> + accept.getInetAddress().getHostName());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(byteArrayOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   byteArrayOutputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   inputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   serverSocket.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>练习二：通过网路传输并且保存下来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cilent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8586</span>);</span><br><span class="line">        outputStream = socket.getOutputStream();</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;尚硅谷_授课须知.pdf&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fileInputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fileInputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   socket.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">    Socket accept = <span class="keyword">null</span>;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8586</span>);</span><br><span class="line">        accept = serverSocket.accept();</span><br><span class="line">        inputStream = accept.getInputStream();</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;尚硅谷_授课须知4.pdf&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fileOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(accept!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                accept.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(serverSocket !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>练习三：返回“发送成功”给 客户端。关闭</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8586</span>);</span><br><span class="line">        outputStream = socket.getOutputStream();</span><br><span class="line">        fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;尚硅谷_授课须知.pdf&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fileInputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//提示停止传输，使得服务器端能够识别客户停止传输了 ,如果没有服务器和客户端会一直传，一直运行</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">while</span>((len1 = inputStream.read(buffer1))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            byteArrayOutputStream.write(buffer1,<span class="number">0</span>,len1);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fileInputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(outputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket !=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">    Socket accept = <span class="keyword">null</span>;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8586</span>);</span><br><span class="line">        accept = serverSocket.accept();</span><br><span class="line">        inputStream = accept.getInputStream();</span><br><span class="line">        fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;尚硅谷_授课须知5.pdf&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fileOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream = accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好，我已收到&quot;</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fileOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(accept!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                accept.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><p>了解</p>
<h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><p>了解</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>基本的SELECT语句</title>
    <url>/2021/11/21/%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="1-SQL概述"><a href="#1-SQL概述" class="headerlink" title="1.SQL概述"></a>1.SQL概述</h2><p>1.sql半衰期chang</p>
<p>2.持久化存储需要使用</p>
<p>3.ANSI指定标准</p>
<p>4.各个厂商有部分规则。常见操作大家都一样。</p>
<h3 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h3><p>DDL：数据定义语言。对表进行操作</p>
<p>DML：数据操作语言。操作一条数据</p>
<p>DCL：数据控制语言。</p>
<h2 id="2-SQL语言的规则与规范"><a href="#2-SQL语言的规则与规范" class="headerlink" title="2.SQL语言的规则与规范"></a>2.SQL语言的规则与规范</h2><h3 id="1-基本规则"><a href="#1-基本规则" class="headerlink" title="1.基本规则"></a>1.基本规则</h3><p>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</p>
<p>每条命令以 ; 或 \g 或 \G 结束</p>
<p>关键字不能被缩写也不能分行</p>
<p>关于标点符号</p>
<p>必须保证所有的()、单引号、双引号是成对结束的</p>
<p>必须使用英文状态下的半角输入方式</p>
<p>字符串型和日期时间类型的数据可以使用单引号（</p>
<p>‘ ‘）表示</p>
<p>列的别名，尽量使用双引号（</p>
<p>“ “），而且不建议省略as</p>
<h3 id="2-大小写规范"><a href="#2-大小写规范" class="headerlink" title="2.大小写规范"></a>2.大小写规范</h3><p>1.windows不敏感</p>
<p>2.Linux下大下写敏感</p>
<ul>
<li>数据库名，表名，表的别名，变量名严格区分大小写</li>
<li>关键字，函数名，列名，列的别名不区分大小写</li>
</ul>
<p>3.建议规范：</p>
<ul>
<li>数据库名，表名，表别名，字段名，字段别名采用小写</li>
<li>SQL关键字，函数名，绑定变量都大写</li>
</ul>
<h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h3><p>单行注释：#注释文字(MySQL特有的方式) </p>
<p>单行注释：– 注释文字(–后面必须包含一个空格。) </p>
<p>多行注释：/* 注释文字 */ </p>
<h3 id="4-导入数据"><a href="#4-导入数据" class="headerlink" title="4.导入数据"></a>4.导入数据</h3><p>1.命令行输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source 绝对路径</span><br></pre></td></tr></table></figure>

<p>2.用图形化界面运行sql语句</p>
<h2 id="3-基本的SELECT语句"><a href="#3-基本的SELECT语句" class="headerlink" title="3.基本的SELECT语句"></a>3.基本的SELECT语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span><span class="operator">*</span><span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;#dual:伪表，和去掉<span class="keyword">from</span> dual一样</span><br><span class="line">#<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line">#获取特定的列</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name <span class="keyword">FROM</span> employees;</span><br><span class="line">#<span class="keyword">select</span> 搜索得到的结果叫结果集，但是有时候，表头我们需要按照我们想要的名字表示，此时可以用别名</span><br><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name <span class="keyword">AS</span> na,email &quot;em&quot; <span class="keyword">FROM</span> employees;#尽量用别名市用“”，<span class="keyword">as</span>：alias别名</span><br><span class="line"><span class="keyword">SELECT</span> department_id <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;#<span class="keyword">distinct</span>去重</span><br><span class="line">#<span class="number">8.</span>空值参与运算</span><br><span class="line">#<span class="number">1.</span><span class="keyword">null</span>不等于，‘<span class="keyword">null</span>’，”<span class="keyword">null</span>“</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees; </span><br><span class="line">#空值运算：结果还是也为空</span><br><span class="line"><span class="keyword">SELECT</span> (<span class="number">1</span><span class="operator">+</span>commission_pct)<span class="operator">*</span><span class="number">12</span> &quot;年工资&quot; <span class="keyword">FROM</span> employees;</span><br><span class="line">#着重号``:当表名或列名与关键字一样时，用着重号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br><span class="line">#查询常数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">123</span> &quot;as&quot; <span class="keyword">FROM</span> employees;</span><br><span class="line">#描述表结构</span><br><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br><span class="line">#<span class="keyword">where</span> 在<span class="keyword">from</span>后面用于筛选内容，widows下关键字不区分大小写，mysql对于一些内容不太严谨，不区分大小写</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">#实际的last_name</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span>;#筛选成功</span><br><span class="line">#把实际的last_name大小变化；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;kING&#x27;</span>;#也能成功</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>查询员工<span class="number">12</span>个月的工资总和，并起别名为ANNUAL SALARY </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,first_name,last_name,salary<span class="operator">*</span><span class="number">12</span> &quot;ANNUAL SALARY&quot; <span class="keyword">FROM</span> employees;</span><br><span class="line"># <span class="number">2.</span>查询employees表中去除重复的job_id以后的数据 \</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job_id <span class="keyword">FROM</span> employees;</span><br><span class="line"># <span class="number">3.</span>查询工资大于<span class="number">12000</span>的员工姓名和工资 </span><br><span class="line"><span class="keyword">SELECT</span> first_name,last_name,salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">12000</span>;</span><br><span class="line"># <span class="number">4.</span>查询员工号为<span class="number">176</span>的员工的姓名和部门号 </span><br><span class="line"><span class="keyword">SELECT</span> first_name,last_name,department_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">176</span>;</span><br><span class="line"># <span class="number">5.</span>显示表 departments 的结构，并查询其中的全部数据</span><br><span class="line"><span class="keyword">DESCRIBE</span> departments;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>排序和分页</title>
    <url>/2021/11/23/%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1.排序数据"></a>1.排序数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1.</span>排序</span><br><span class="line">#如果没有排序，显示的数据按照添加顺序输出</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">#引入oder <span class="keyword">by</span> ：排序通过，默认通过升序排，也可以显式的说明<span class="keyword">ASC</span>(升序)，<span class="keyword">DESC</span>（降序）（ascend，descend），</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> employee_id <span class="keyword">DESC</span>;</span><br><span class="line">#练习：按照salary从高到低进行排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line">#从低到高</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>;</span><br><span class="line">#用别名进行排序</span><br><span class="line"><span class="keyword">SELECT</span> salary<span class="operator">*</span><span class="number">12</span> &quot;an&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> an <span class="keyword">DESC</span>;</span><br><span class="line">#别名只能用在<span class="keyword">order</span> <span class="keyword">by</span>后面，其他的位置不能，一般顺序：先<span class="keyword">from</span>后<span class="keyword">where</span>，在看要选的列，才进行排序</span><br><span class="line"></span><br><span class="line">#二级排序（多级排序类似）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,employee_id <span class="keyword">ASC</span>; </span><br></pre></td></tr></table></figure>

<h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2.分页"></a>2.分页</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#分页</span><br><span class="line">#mysql使用limit进行分页显示</span><br><span class="line">#需求<span class="number">1</span>：每页显示<span class="number">20</span>条记录</span><br><span class="line">#@第一页</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line">#第二页</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">20</span>,<span class="number">20</span>;</span><br><span class="line">#<span class="keyword">where</span> ...<span class="keyword">order</span> <span class="keyword">by</span> .... limit....顺序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">2</span>,<span class="number">1</span>;</span><br><span class="line">#limit 参数<span class="number">1</span>，参数<span class="number">2</span>：参数<span class="number">1</span>不写时默认为<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="3-分页与排序练习"><a href="#3-分页与排序练习" class="headerlink" title="3.分页与排序练习"></a>3.分页与排序练习</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1.</span> 查询员工的姓名和部门号和年薪，按年薪降序,按姓名升序显示 </span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,last_name <span class="keyword">ASC</span>;</span><br><span class="line">#<span class="number">2.</span> 选择工资不在 <span class="number">8000</span> 到 <span class="number">17000</span> 的员工的姓名和工资，按工资降序，显示第<span class="number">21</span>到<span class="number">40</span>位置的数据</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">8000</span> <span class="keyword">AND</span> <span class="number">17000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span>,<span class="number">20</span>;</span><br><span class="line"> #<span class="number">3.</span> 查询邮箱中包含 e 的员工信息，并先按邮箱的字节数降序，再按部门号升序</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> email <span class="keyword">DESC</span>;</span><br><span class="line"> #<span class="number">2</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2021/11/22/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>, <span class="number">100</span> <span class="operator">+</span> <span class="number">0</span>, <span class="number">100</span> <span class="operator">-</span> <span class="number">0</span>, <span class="number">100</span> <span class="operator">+</span> <span class="number">50</span>, <span class="number">100</span> <span class="operator">+</span> <span class="number">50</span> <span class="number">-30</span>, <span class="number">100</span> <span class="operator">+</span> <span class="number">35.5</span>, <span class="number">100</span> <span class="operator">-</span> <span class="number">35.5</span> <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加减乘除(结果为浮点数)，取余数（%或mod）</p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#运算符</span><br><span class="line">#<span class="operator">=</span>，<span class="operator">&lt;=&gt;</span>(专门为<span class="keyword">null</span>而生的)，<span class="operator">&lt;&gt;</span><span class="operator">!=</span>,<span class="operator">&lt;</span>,<span class="operator">&lt;=</span>,<span class="operator">&gt;</span>,<span class="operator">&gt;=</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>,<span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bs&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span><span class="operator">&lt;=&gt;</span><span class="keyword">NULL</span>,<span class="number">1</span><span class="operator">=</span><span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">!=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line">#关键字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">#least(最小的)，greatest（最大的）</span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">10</span>,<span class="number">20</span>,<span class="number">56</span>,<span class="number">98</span>),GREATEST(<span class="number">12</span>,<span class="number">25</span>,<span class="number">550</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> LEAST(last_name,first_name),GREATEST(last_name,first_name)</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">#<span class="keyword">between</span> 条件<span class="number">1</span> <span class="keyword">and</span> 条件<span class="number">2</span>:在什么范围内，包括边界条件，条件<span class="number">1</span>为下限，<span class="number">2</span>为上限</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">9000</span> <span class="keyword">AND</span> <span class="number">12000</span>;</span><br><span class="line">#相同意义的写法</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span> <span class="number">9000</span> <span class="keyword">AND</span> salary <span class="operator">&lt;=</span> <span class="number">12000</span>;</span><br><span class="line">#在区间外</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">9000</span> <span class="keyword">AND</span> <span class="number">12000</span>;</span><br><span class="line">#相同意义的一样</span><br><span class="line">#<span class="keyword">In</span>与<span class="keyword">not</span> <span class="keyword">in</span>后面跟结合，<span class="keyword">between</span> <span class="keyword">and</span>范围，这个就是一些离散的点，后面跟个集合（数学上的）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">#<span class="keyword">like</span>:模糊查询,<span class="string">&#x27;%i%&#x27;</span><span class="operator">%</span>叫不确定的内容的占位符，<span class="string">&#x27;_i%&#x27;</span>_有几个就代表i前面有几个不确定的字符，如果就是想查询_加上转义符，默认<span class="string">&#x27;\&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_i%&#x27;</span>;</span><br><span class="line">#rlike:正则匹配</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name RLIKE <span class="string">&#x27;s$&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算和位运算"><a href="#逻辑运算和位运算" class="headerlink" title="逻辑运算和位运算"></a>逻辑运算和位运算</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#逻辑运算符</span><br><span class="line">#<span class="keyword">and</span> <span class="operator">&amp;&amp;</span>,<span class="keyword">or</span> <span class="operator">||</span>,<span class="keyword">not</span> <span class="operator">!</span>,xor(异或)</span><br><span class="line">#前面用到了</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">0</span> XOR <span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line">#注意<span class="keyword">and</span>运算等级比<span class="keyword">or</span>高，如果记不得优先级，最好用（）</span><br><span class="line">#位运算，<span class="operator">&amp;</span> <span class="operator">|</span> <span class="operator">^</span> <span class="operator">~</span>(取反) <span class="operator">&lt;&lt;</span> <span class="operator">&gt;&gt;</span> (换算成二进制，每位进行运算，java学过)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span><span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>选择工资不在<span class="number">5000</span>到<span class="number">12000</span>的员工的姓名和工资</span><br><span class="line"><span class="keyword">SELECT</span> last_name &quot;姓名&quot;,salary &quot;工资&quot; </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">5000</span> <span class="keyword">AND</span> <span class="number">12000</span>;</span><br><span class="line"> # <span class="number">2.</span>选择在<span class="number">20</span>或<span class="number">50</span>号部门工作的员工姓名和部门号</span><br><span class="line"> <span class="keyword">SELECT</span> last_name,department_id</span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line"> # <span class="number">3.</span>选择公司中没有管理者的员工姓名及job_id </span><br><span class="line"> <span class="keyword">SELECT</span> last_name,job_id </span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> ISNULL(manager_id);  </span><br><span class="line"> # <span class="number">4.</span>选择公司中有奖金的员工姓名，工资和奖金级别</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> employees;</span><br><span class="line"> <span class="keyword">SELECT</span> last_name,salary,commission_pct</span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span>  commission_pct  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"> # <span class="number">5.</span>选择员工姓名的第三个字母是a的员工姓名 </span><br><span class="line"> <span class="keyword">SELECT</span> last_name</span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;__a%&#x27;</span>;</span><br><span class="line"> # <span class="number">6.</span>选择姓名中有字母a和k的员工姓名 </span><br><span class="line"> #方式一：</span><br><span class="line"> <span class="keyword">SELECT</span> last_name</span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">AND</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;</span><br><span class="line"> #方式二：</span><br><span class="line"> <span class="keyword">SELECT</span> last_name </span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%k%&#x27;</span> <span class="keyword">OR</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%a%&#x27;</span>;</span><br><span class="line"> # <span class="number">7.</span>显示出表 employees 表中 first_name 以 <span class="string">&#x27;e&#x27;</span>结尾的员工信息</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> employees</span><br><span class="line"> <span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;e$&#x27;</span>;</span><br><span class="line">  # <span class="number">8.</span>显示出表 employees 部门编号在 <span class="number">80</span><span class="number">-100</span> 之间的姓名、工种 </span><br><span class="line">  <span class="keyword">SELECT</span> last_name,job_id</span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">WHERE</span> department_id <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"># <span class="number">9.</span>显示出表 employees 的 manager_id 是 <span class="number">100</span>,<span class="number">101</span>,<span class="number">110</span> 的员工姓名、工资、管理者id</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span>(<span class="number">100</span>,<span class="number">110</span>,<span class="number">101</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL笔记</tag>
      </tags>
  </entry>
</search>
